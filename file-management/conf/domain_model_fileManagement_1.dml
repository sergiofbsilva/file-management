package module.fileManagement.domain;

enum module.fileManagement.domain.OperationLogType as OperationLogType;

external class .pt.ist.fenixframework.plugins.fileSupport.domain.GenericFile;

class task.CreateDefaultMetadataTemplates extends .myorg.domain.scheduler.Task {
}

class task.PopulateRootDirTask extends .myorg.domain.scheduler.Task { }


class AbstractFileNode {
	String ojbConcreteClass;
}

	class FileNode extends AbstractFileNode {
	}

	class DirNode extends AbstractFileNode {
		String name;
		Long size;
		Long quota;
	}
	
	class SharedFileNode extends FileNode {
	
	}
	
	class SharedDirNode extends DirNode {
	
	}


class Document {
	DateTime lastModifiedDate;
}

class MetadataKey {
	String keyValue;
}

class Metadata {
	String value;
	DateTime timestamp ( REQUIRED );
}

relation MetadataMetadataKey {
	MetadataKey playsRole metadataKey {
		multiplicity 1;
	}
	Metadata playsRole metadata {
		multiplicity *;
	}
}


class MetadataTemplate {
	String name;
}

// RELATIONS


relation MetadataKeysTemplate {
	MetadataTemplate playsRole templates {
		multiplicity *;
	}
	MetadataKey playsRole keys {
		multiplicity *;
	}
}

relation DocumentMetadata {
	Document playsRole document {
		multiplicity 1;
	}
	Metadata playsRole metadata {
		multiplicity *;
	}
}

relation TemplateTemplates {
	MetadataTemplate playsRole parent;
	MetadataTemplate playsRole childs {
		multiplicity *;
	}
}


class VersionedFile extends .pt.ist.fenixframework.plugins.fileSupport.domain.GenericFile {
}


relation VersionedFileVersionedFile {
	VersionedFile playsRole previousVersion;
	VersionedFile playsRole nextVersion;
}

relation DocumentVersionedFile {
	Document playsRole document;
	VersionedFile playsRole lastVersionedFile {
		multiplicity 1..1;
	}
}

relation SharedFileNodeFileNode {
	FileNode playsRole node {
		multiplicity 1..1;
	}
	SharedFileNode playsRole sharedFileNodes {
		multiplicity *;
	} 
}

relation SharedDirNodeDirNode {
	DirNode playsRole node {
		multiplicity 1..1;
	}
	SharedDirNode playsRole sharedDirNodes {
		multiplicity *;
	} 
}

relation FileNodeFile {
	FileNode playsRole fileNode {
		multiplicity *;
	}
	Document playsRole document {
		multiplicity 1;
	}
}

relation DirNodeAbstractFileNode {
	DirNode playsRole parent;
	AbstractFileNode playsRole child {
		multiplicity *;
	}
}

relation DirNodeReadGroup {
	DirNode playsRole dirNodeFromReadGroup {
		multiplicity *;
	}
	.myorg.domain.groups.PersistentGroup playsRole readGroup;
}

relation DirNodeWriteGroup {
	DirNode playsRole dirNodeFromWriteGroup {
		multiplicity *;
	}
	.myorg.domain.groups.PersistentGroup playsRole writeGroup;
}

relation DocumentReadGroup {
	Document playsRole documentFromReadGroup {
		multiplicity *;
	}
	.myorg.domain.groups.PersistentGroup playsRole readGroup;
}

relation DocumentWriteGroup {
	Document playsRole documentFromWriteGroup {
		multiplicity *;
	}
	.myorg.domain.groups.PersistentGroup playsRole writeGroup;
}


relation UserAbstractFileNode {
	.myorg.domain.User playsRole user;
	DirNode playsRole fileRepository;
}

relation UserTrash {
	.myorg.domain.User playsRole trashUser;
	DirNode playsRole trash;
}

relation DirNodeTrashNode {
	DirNode playsRole trash;
	DirNode playsRole rootDirNode;
}


/*relation UnitAbstractFileNode {
	.module.organization.domain.Unit playsRole unit;
	DirNode playsRole fileRepository;
}*/

class FileManagementSystem { 

}

relation FileManagementTemplates {
	FileManagementSystem playsRole fileManagementSystem;
	MetadataTemplate playsRole metadataTemplates {
		multiplicity *;
	}
}

relation FileManagementMetadataKeys {
	FileManagementSystem playsRole  fileManagementSystem;
	MetadataKey playsRole metadataKeys {
		multiplicity *;
	}
}

relation FileManagementMyOrg {
	.myorg.domain.MyOrg playsRole myOrg;
	FileManagementSystem playsRole fileManagementSystem;
}

