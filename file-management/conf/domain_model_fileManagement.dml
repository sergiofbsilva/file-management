package module.fileManagement.domain;


external class .pt.ist.fenixframework.plugins.fileSupport.domain.GenericFile;


class AbstractFileNode {
	String ojbConcreteClass;
}

	class FileNode extends AbstractFileNode {
	}

	class DirNode extends AbstractFileNode {
		String name;
	}

class Document {
}

class Metadata {
	String valueKey;
	String value;
}

class VersionedFile extends .pt.ist.fenixframework.plugins.fileSupport.domain.GenericFile {
}


relation VersionedFileVersionedFile {
	VersionedFile playsRole previousVersion;
	VersionedFile playsRole nextVersion;
}

relation DocumentVersionedFile {
	Document playsRole document;
	VersionedFile playsRole lastVersionedFile {
		multiplicity 1..1;
	}
}

relation DocumentMetadata {
	Document playsRole document {
		multiplicity 1..1;
	}
	Metadata playsRole metadata {
		multiplicity *;
	}
}

relation FileNodeFile {
	FileNode playsRole fileNode {
		multiplicity *;
	}
	Document playsRole document {
		multiplicity 1..1;
	}
}

relation DirNodeAbstractFileNode {
	DirNode playsRole parent;
	AbstractFileNode playsRole child {
		multiplicity *;
	}
}

relation DirNodeReadGroup {
	DirNode playsRole dirNodeFromReadGroup {
		multiplicity *;
	}
	.myorg.domain.groups.PersistentGroup playsRole readGroup;
}

relation DirNodeWriteGroup {
	DirNode playsRole dirNodeFromWriteGroup {
		multiplicity *;
	}
	.myorg.domain.groups.PersistentGroup playsRole writeGroup;
}

relation DocumentReadGroup {
	Document playsRole documentFromReadGroup {
		multiplicity *;
	}
	.myorg.domain.groups.PersistentGroup playsRole readGroup;
}

relation DocumentWriteGroup {
	Document playsRole documentFromWriteGroup {
		multiplicity *;
	}
	.myorg.domain.groups.PersistentGroup playsRole writeGroup;
}




relation UserAbstractFileNode {
	.myorg.domain.User playsRole user;
	DirNode playsRole fileRepository;
}

relation UnitAbstractFileNode {
	.module.organization.domain.Unit playsRole unit;
	DirNode playsRole fileRepository;
}


